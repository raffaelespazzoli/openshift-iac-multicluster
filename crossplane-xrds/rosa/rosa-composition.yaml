apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: rosa
spec:
  compositeTypeRef:
    apiVersion: crossplane.redhat-cop.com/v1alpha1
    kind: xRosa
  patchSets:
  - name: availability_zone_a
    patches:
    - type: CombineFromComposite
      combine:
        variables:
          - fromFieldPath: spec.region
        strategy: string
        string:
          fmt: "%sa"
      toFieldPath: availabilityZone
  - name: availability_zone_b
    patches:
    - type: CombineFromComposite
      combine:
        variables:
          - fromFieldPath: spec.region
        strategy: string
        string:
          fmt: "%sb"
      toFieldPath: availabilityZone
  - name: availability_zone_c
    patches:
    - type: CombineFromComposite
      combine:
        variables:
          - fromFieldPath: spec.region
        strategy: string
        string:
          fmt: "%sc"
      toFieldPath: availabilityZone              
  - name: region
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: "spec.region"
      toFieldPath: "spec.forProvider.region"
  - name: name-tag
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: "metadata.name"
      toFieldPath: "spec.forProvider.tags.Name"            
  resources:
  - name: vpc
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: VPC
      metadata:
        name: vpc
      spec:
        forProvider:
          cidrBlock: 10.0.0.0/16
          enableDnsHostnames: true
          enableDnsSupport: true
          region: replace
          tags:
            Name: replace
    patches:
      - type: PatchSet
        patchSetName: region
      - type: PatchSet
        patchSetName: name-tag
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition

  - name: internet-gateway
    base: 
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: InternetGateway
      metadata:
        name: internet-gateway
      spec:
        forProvider:
          region: replace
          tags:
            Name: replace
          vpcIdSelector:
            matchControllerRef: true
    patches:
      - type: PatchSet
        patchSetName: name-tag
      - type: PatchSet
        patchSetName: region
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition        

  - name: elastic-ip
    base: 
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: EIP
      metadata:
        name: elastic-ip
      spec:
        forProvider:
          tags:
            Name: replace        
          region: replace
          vpc: true
    patches:
      - type: PatchSet
        patchSetName: name-tag
      - type: PatchSet
        patchSetName: region
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition
  - name: nat-gateway
    base: 
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: NATGateway
      metadata:
        name: nat-gateway
      spec:
        forProvider:
          region: replace
          tags:
            Name: replace          
          subnetIdSelector:
            matchLabels:
              public-subnet: ""
          allocationIdSelector:
            matchControllerRef: true              
    patches:
      - type: PatchSet
        patchSetName: name-tag
      - type: PatchSet
        patchSetName: region
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition

  - name: public-route-table
    base: 
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: RouteTable
      metadata:
        name: public-route-table
        labels:
          public: ""        
      spec:
        forProvider:
          region: replace
          tags:
            Name: replace
          vpcIdSelector:
            matchControllerRef: true            
    patches:
      - type: PatchSet
        patchSetName: name-tag
      - type: PatchSet
        patchSetName: region
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition

  - name: public-route
    base: 
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: Route
      metadata:
        name: public-route
      spec:
        forProvider:
          destinationCidrBlock: 0.0.0.0/0
          region: replace
          tags:
            Name: replace
          gatewayIdSelector:
            matchControllerRef: true
          routeTableIdSelector:
            matchLabels:
              public: ""                        
    patches:
      - type: PatchSet
        patchSetName: name-tag
      - type: PatchSet
        patchSetName: region
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition    

  - name: private-route-table
    base: 
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: RouteTable
      metadata:
        name: private-route-table
        labels:
          private: ""        
      spec:
        forProvider:
          region: replace
          tags:
            Name: replace
          vpcIdSelector:
            matchControllerRef: true
    patches:
      - type: PatchSet
        patchSetName: name-tag
      - type: PatchSet
        patchSetName: region
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition             

  - name: private-route
    base: 
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: Route
      metadata:
        name: private-route
      spec:
        forProvider:
          destinationCidrBlock: 0.0.0.0/0
          region: replace
          tags:
            Name: replace
          natGatewayIdSelector:
            matchControllerRef: true
          routeTableIdSelector:
            matchLabels:
              public: ""

  - name: public-route-table-association
    base: 
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: RouteTableAssociation
      metadata:
        name: public-route-table-association
      spec:
        forProvider:
          region: replace
          tags:
            Name: replace          
          routeTableIdSelector:
            matchLabels:
              public: ""
          subnetIdSelector:
            matchLabels:
              public-subnet: ""
    patches:
      - type: PatchSet
        patchSetName: name-tag
      - type: PatchSet
        patchSetName: region
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition

       

  - name: private-route-table-association
    base: 
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: RouteTableAssociation
      metadata:
        name: private-route-table-association
      spec:
        forProvider:
          region: replace
          tags:
            Name: replace          
          routeTableIdSelector:
            matchLabels:
              private: ""
          subnetIdSelector:
            matchLabels:
              private-subnet: ""
    patches:
      - type: PatchSet
        patchSetName: name-tag
      - type: PatchSet
        patchSetName: region
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition              

# zone a

  - name: public-subnet-a
    base: 
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: Subnet
      metadata:
        name: public-a
        labels:
          public-subnet: ""
      spec:
        forProvider:
          cidrBlock: 10.0.1.0/24
          region: replace
          tags:
            Name: replace          
          vpcIdSelector:
            matchControllerRef: true
          availabilityZone: replace  
    patches:
      - type: ToCompositeFieldPath
        fromFieldPath: status.atProvider.id
        toFieldPath: "status.subnets.aza.publicSubnetID"
        policy:
          fromFieldPath: Optional    
      - type: PatchSet
        patchSetName: region
      - type: PatchSet
        patchSetName: availability_zone_a
      - type: PatchSet
        patchSetName: name-tag   
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition
  - name: private-subnet-a
    base: 
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: Subnet
      metadata:
        name: private-a
        labels:
          private-subnet: ""
      spec:
        forProvider:
          cidrBlock: 10.0.4.0/24
          region: replace
          tags:
            Name: replace          
          vpcIdSelector:
            matchControllerRef: true
          availabilityZone: replace  
    patches:
      - type: ToCompositeFieldPath
        fromFieldPath: status.atProvider.id
        toFieldPath: "status.subnets.aza.privateSubnetID"
        policy:
          fromFieldPath: Optional
      - type: PatchSet
        patchSetName: region
      - type: PatchSet
        patchSetName: availability_zone_a
      - type: PatchSet
        patchSetName: name-tag                  
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition

# zone b

  - name: public-subnet-b
    base: 
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: Subnet
      metadata:
        name: public-b
        labels:
          public-subnet: ""
      spec:
        forProvider:
          cidrBlock: 10.0.2.0/24
          region: replace
          tags:
            Name: replace          
          vpcIdSelector:
            matchControllerRef: true
          availabilityZone: replace  
    patches:
      - type: ToCompositeFieldPath
        fromFieldPath: status.atProvider.id
        toFieldPath: "status.subnets.azb.publicSubnetID"
        policy:
          fromFieldPath: Optional    
      - type: PatchSet
        patchSetName: region
      - type: PatchSet
        patchSetName: availability_zone_b
      - type: PatchSet
        patchSetName: name-tag   
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition
  - name: private-subnet-b
    base: 
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: Subnet
      metadata:
        name: private-b
        labels:
          private-subnet: ""
      spec:
        forProvider:
          cidrBlock: 10.0.5.0/24
          region: replace
          tags:
            Name: replace          
          vpcIdSelector:
            matchControllerRef: true
          availabilityZone: replace  
    patches:
      - type: ToCompositeFieldPath
        fromFieldPath: status.atProvider.id
        toFieldPath: "status.subnets.azb.privateSubnetID"
        policy:
          fromFieldPath: Optional
      - type: PatchSet
        patchSetName: region
      - type: PatchSet
        patchSetName: availability_zone_b
      - type: PatchSet
        patchSetName: name-tag                  
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition

#zone c

  - name: public-subnet-c
    base: 
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: Subnet
      metadata:
        name: public-c
        labels:
          public-subnet: ""
      spec:
        forProvider:
          cidrBlock: 10.0.3.0/24
          region: replace
          tags:
            Name: replace          
          vpcIdSelector:
            matchControllerRef: true
          availabilityZone: replace  
    patches:
      - type: ToCompositeFieldPath
        fromFieldPath: status.atProvider.id
        toFieldPath: "status.subnets.azc.publicSubnetID"
        policy:
          fromFieldPath: Optional    
      - type: PatchSet
        patchSetName: region
      - type: PatchSet
        patchSetName: availability_zone_c
      - type: PatchSet
        patchSetName: name-tag   
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition

  - name: private-subnet-c
    base: 
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: Subnet
      metadata:
        name: private-c
        labels:
          private-subnet: ""
      spec:
        forProvider:
          cidrBlock: 10.0.6.0/24
          region: replace
          tags:
            Name: replace          
          vpcIdSelector:
            matchControllerRef: true
          availabilityZone: replace  
    patches:
      - type: ToCompositeFieldPath
        fromFieldPath: status.atProvider.id
        toFieldPath: "status.subnets.azc.privateSubnetID"
        policy:
          fromFieldPath: Optional
      - type: PatchSet
        patchSetName: region
      - type: PatchSet
        patchSetName: availability_zone_c
      - type: PatchSet
        patchSetName: name-tag                  
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition        

  - name: rosa
    base:
      apiVersion: tf.upbound.io/v1beta1
      kind: Workspace
      metadata:
        name: rosa
      spec:
        publishConnectionDetailsTo:
          name: rosa-tf
          configRef:
            name: vault      
        forProvider:
          # Use any module source supported by terraform init -from-module.
          source: Remote
          module: git::https://github.com/raffaelespazzoli/openshift-iac-multicluster//terraform/rosa
          # Variables can be specified inline as a list of key-value pairs or as an json object, or loaded from a ConfigMap or Secret.
          vars:
          - key: operator_role_prefix
            value: ""
          - key: account_role_prefix
            value: ""
          - key: cluster_name
            value: ""         
          - key: cloud_region
            value: ""
          - key: aws_subnet_id_a1
            value: ""
          - key: aws_subnet_id_a2
            value: ""
          - key: aws_subnet_id_b1
            value: ""
          - key: aws_subnet_id_b2
            value: ""
          - key: aws_subnet_id_c1
            value: ""
          - key: aws_subnet_id_c2
            value: ""
          - key: availability_zone_a
            value: ""
          - key: availability_zone_b
            value: ""
          - key: availability_zone_c
            value: ""                                               
          varFiles:  
          - secretKeyRef:
              key: key
              name: name
              namespace: namespace
            source: SecretKey
            format: JSON                            
    patches: 

    - type: CombineFromComposite
      combine:
        variables:
          - fromFieldPath: metadata.name
        strategy: string
        string:
          fmt: "%s-operator"
      toFieldPath: spec.forProvider.vars[0].value

    - type: CombineFromComposite
      combine:
        variables:
          - fromFieldPath: metadata.name
        strategy: string
        string:
          fmt: "%s-account"
      toFieldPath: spec.forProvider.vars[1].value

    - type: FromCompositeFieldPath
      fromFieldPath: "metadata.name"
      toFieldPath: "spec.forProvider.vars[2].value"      

    - type: FromCompositeFieldPath
      fromFieldPath: "spec.region"
      toFieldPath: "spec.forProvider.vars[3].value" 

    - type: FromCompositeFieldPath
      fromFieldPath: "status.subnets.aza.privateSubnetID"
      toFieldPath: "spec.forProvider.vars[4].value"
      policy:
        fromFieldPath: Required

    - type: FromCompositeFieldPath
      fromFieldPath: "status.subnets.aza.publicSubnetID"
      toFieldPath: "spec.forProvider.vars[5].value"
      policy:
        fromFieldPath: Required
        
    - type: FromCompositeFieldPath
      fromFieldPath: "status.subnets.azb.privateSubnetID"
      toFieldPath: "spec.forProvider.vars[5].value"
      policy:
        fromFieldPath: Required

    - type: FromCompositeFieldPath
      fromFieldPath: "status.subnets.azb.publicSubnetID"
      toFieldPath: "spec.forProvider.vars[6].value"
      policy:
        fromFieldPath: Required

    - type: FromCompositeFieldPath
      fromFieldPath: "status.subnets.azc.privateSubnetID"
      toFieldPath: "spec.forProvider.vars[7].value"
      policy:
        fromFieldPath: Required

    - type: FromCompositeFieldPath
      fromFieldPath: "status.subnets.azc.publicSubnetID"
      toFieldPath: "spec.forProvider.vars[8].value"
      policy:
        fromFieldPath: Required                        

    - type: CombineFromComposite
      combine:
        variables:
          - fromFieldPath: spec.region
        strategy: string
        string:
          fmt: "%sa"
      toFieldPath: spec.forProvider.vars[10].value

    - type: CombineFromComposite
      combine:
        variables:
          - fromFieldPath: spec.region
        strategy: string
        string:
          fmt: "%sb"
      toFieldPath: spec.forProvider.vars[11].value 

    - type: CombineFromComposite
      combine:
        variables:
          - fromFieldPath: spec.region
        strategy: string
        string:
          fmt: "%sc"
      toFieldPath: spec.forProvider.vars[12].value           

    - type: FromCompositeFieldPath
      fromFieldPath: "spec.availabilityZone"
      toFieldPath: "spec.forProvider.vars[5].value"                               

    - type: FromCompositeFieldPath
      fromFieldPath: "spec.adminSecret.secretName"
      toFieldPath: "spec.forProvider.varFiles[0].secretKeyRef.name"

    - type: FromCompositeFieldPath
      fromFieldPath: "spec.adminSecret.key"
      toFieldPath: "spec.forProvider.varFiles[0].secretKeyRef.key"

    - type: FromCompositeFieldPath
      fromFieldPath: "metadata.labels['crossplane.io/claim-namespace']"
      toFieldPath: "spec.forProvider.varFiles[0].secretKeyRef.namespace"            

    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition                                                                                                                      