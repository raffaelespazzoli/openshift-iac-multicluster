apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: aro
spec:
  compositeTypeRef:
    apiVersion: crossplane.redhat-cop.com/v1alpha1
    kind: xAro
  patchSets:
  - name: resourceGroup
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: "spec.resourceGroup"
      toFieldPath: "spec.forProvider.resourceGroupName"
  - name: location
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: "spec.location"
      toFieldPath: "spec.forProvider.location"      
  resources:
  - name: vnet
    base:
      apiVersion: network.azure.upbound.io/v1beta1
      kind: VirtualNetwork
      metadata:
        name: aro-vnet  
      spec:
        forProvider:
          addressSpace:
            - replace
          location: replace
          resourceGroupName: replace
    patches:
      - type: FromCompositeFieldPath
        fromFieldPath: "spec.subnet"
        toFieldPath: "spec.forProvider.addressSpace[0]"
      - type: PatchSet
        patchSetName: location
      - type: PatchSet
        patchSetName: resourceGroup
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition                             
  - name: control-plane-subnet
    base:
      apiVersion: network.azure.upbound.io/v1beta1
      kind: Subnet
      metadata:
        name: control-plane-subnet  
        labels:
          control-plane-subnet: ""
      spec:
        forProvider:
          addressPrefixes:
            - replace
          resourceGroupName: replace
          virtualNetworkNameSelector:
            matchControllerRef: true
    patches:
      - type: FromCompositeFieldPath
        fromFieldPath: "spec.controlPlaneSubnet"
        toFieldPath: "spec.forProvider.addressPrefixes[0]"
      - type: PatchSet
        patchSetName: resourceGroup
      - type: ToCompositeFieldPath
        fromFieldPath: status.atProvider.id
        toFieldPath: "status.subnets.controlPlaneSubnetId"
        policy:
          fromFieldPath: Optional
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition                           
  - name: worker-node-subnet
    base:
      apiVersion: network.azure.upbound.io/v1beta1
      kind: Subnet
      metadata:
        name: worker-node-subnet 
        labels:
          worker-node-subnet: ""   
      spec:
        forProvider:
          addressPrefixes:
            - replace
          resourceGroupName: replace
          virtualNetworkNameSelector:
            matchControllerRef: true
    patches:
      - type: FromCompositeFieldPath
        fromFieldPath: "spec.workerNodeSubnet"
        toFieldPath: "spec.forProvider.addressPrefixes[0]"
      - type: PatchSet
        patchSetName: resourceGroup
      - type: ToCompositeFieldPath
        fromFieldPath: status.atProvider.id
        toFieldPath: "status.subnets.workerNodeSubnetId"
        policy:
          fromFieldPath: Optional
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition                          
  - name: firewall-subnet
    base:
      apiVersion: network.azure.upbound.io/v1beta1
      kind: Subnet
      metadata:
        name: firewall-subnet
        labels:
          firewall-subnet: ""
        annotations:
          crossplane.io/external-name: AzureFirewallSubnet   
      spec:
        forProvider:
          addressPrefixes:
            - replace
          resourceGroupName: replace
          virtualNetworkNameSelector:
            matchControllerRef: true
    patches:
      - type: FromCompositeFieldPath
        fromFieldPath: "spec.firewallSubnet"
        toFieldPath: "spec.forProvider.addressPrefixes[0]"
      - type: PatchSet
        patchSetName: resourceGroup
      - type: ToCompositeFieldPath
        fromFieldPath: "status.atProvider.id"
        toFieldPath: "status.subnets.firewallSubnetId"
        policy:
          fromFieldPath: Optional
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition                  
  - name: firewall-public-ip
    base: 
      apiVersion: network.azure.upbound.io/v1beta1
      kind: PublicIP
      metadata:
        name: firewall-ip   
      spec:
        forProvider:
          location: replace
          resourceGroupName: replace   
          sku: Standard
          allocationMethod: Static
    patches:
      - type: PatchSet
        patchSetName: location
      - type: PatchSet
        patchSetName: resourceGroup
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition        
  - name: firewall
    base:
      apiVersion: network.azure.upbound.io/v1beta1
      kind: Firewall
      metadata:
        name: firewall  
      spec:
        forProvider:
          ipConfiguration:
            - name: fw-config
              publicIpAddressIdSelector:
                matchControllerRef: true
              subnetIdSelector:
                matchLabels: 
                  firewall-subnet: ""
          location: replace
          resourceGroupName: replace
          skuTier: Standard
          skuName: AZFW_VNet          
    patches:
      - type: PatchSet
        patchSetName: location
      - type: PatchSet
        patchSetName: resourceGroup
      - type: ToCompositeFieldPath
        fromFieldPath: status.atProvider.ipConfiguration[0].privateIpAddress
        toFieldPath: status.firewall.privateIpAddress
        policy:
          fromFieldPath: Optional
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition                  
  - name: firewall-rule-collection
    base:
      apiVersion: network.azure.upbound.io/v1beta1
      kind: FirewallNetworkRuleCollection
      metadata:
        name: firewall-rule-collection
      spec:
        forProvider:
          action: Allow
          azureFirewallNameSelector: 
            matchControllerRef: true
          priority: 100
          resourceGroupName: replace
          rule:
            - destinationAddresses:
                - "*"
              destinationPorts:
                - 1-65535
              name: allow-all
              protocols:
                - Any
              sourceAddresses:
                - "*"
    patches:
      - type: PatchSet
        patchSetName: resourceGroup
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition        
  - name: route-table
    base:    
      apiVersion: network.azure.upbound.io/v1beta1
      kind: RouteTable
      metadata:
        name: route-table   
      spec:
        forProvider:
          location: replace
          resourceGroupName: replace
    patches:
      - type: PatchSet
        patchSetName: location
      - type: PatchSet
        patchSetName: resourceGroup
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition        
  - name: egress-route
    base:   
      apiVersion: network.azure.upbound.io/v1beta1
      kind: Route
      metadata:
        name: egress-route
      spec:
        forProvider:
          addressPrefix: 0.0.0.0/0
          nextHopType: VirtualAppliance
          nextHopInIpAddress: replace
          resourceGroupName: replace
          routeTableNameSelector: 
            matchControllerRef: true
    patches:
      - type: PatchSet
        patchSetName: resourceGroup
      - type: FromCompositeFieldPath
        fromFieldPath: "status.firewall.privateIpAddress"
        toFieldPath: "spec.forProvider.nextHopInIpAddress"
        policy:
          fromFieldPath: Required
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition                          
  - name: vnet-route
    base:
      apiVersion: network.azure.upbound.io/v1beta1
      kind: Route
      metadata:
        name: vnet-route  
      spec:
        forProvider:
          addressPrefix: 10.0.0.0/16
          nextHopType: VirtualNetworkGateway
          resourceGroupName: replace
          routeTableNameSelector: 
            matchControllerRef: true
    patches:
      - type: PatchSet
        patchSetName: resourceGroup
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition        
  - name: control-plane-subnet-route-table-association
    base:
      apiVersion: network.azure.upbound.io/v1beta1
      kind: SubnetRouteTableAssociation
      metadata:
        name: control-plane-subnet-association
      spec:
        forProvider:
          routeTableIdSelector: 
            matchControllerRef: true
          subnetIdSelector:
            matchLabels: 
              control-plane-subnet: ""
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition              
  - name: worker-node-subnet-route-table-association
    base:
      apiVersion: network.azure.upbound.io/v1beta1
      kind: SubnetRouteTableAssociation
      metadata:
        name: worker-nodes-subnet-association
      spec:
        forProvider:
          routeTableIdSelector: 
            matchControllerRef: true
          subnetIdSelector:
            matchLabels: 
              worker-node-subnet: ""
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition              
  - name: aro
    base:
      apiVersion: tf.upbound.io/v1beta1
      kind: Workspace
      metadata:
        name: aro
      spec:
        forProvider:
          # Use any module source supported by terraform init -from-module.
          source: Remote
          module: https://github.com/raffaelespazzoli/openshift-iac-multicluster/terraform/aro
          # Variables can be specified inline as a list of key-value pairs or as an json object, or loaded from a ConfigMap or Secret.
          vars:
          - key: name
            value: ""
          - key: location
            value: ""
          - key: resource_group_id
            value: ""         
          - key: master_subnet_id
            value: ""
          - key: worker_subnet_id
            value: ""
          - key: api_server_visibility
            value: ""
          - key: ingress_visibility
            value: ""
          varFiles:
          - secretKeyRef:
              key: key
              name: name
              namespace: namespace
            source: SecretKey      
    patches:

    - type: FromCompositeFieldPath
      fromFieldPath: "spec.servicePrincipalSecret.secretName"
      toFieldPath: "spec.forProvider.varFiles[0].secretKeyRef.name"

    - type: FromCompositeFieldPath
      fromFieldPath: "spec.servicePrincipalSecret.key"
      toFieldPath: "spec.forProvider.varFiles[0].secretKeyRef.key"

    - type: FromCompositeFieldPath
      fromFieldPath: "metadata.namespace"
      toFieldPath: "spec.forProvider.varFiles[0].secretKeyRef.namespace"            

    - type: FromCompositeFieldPath
      fromFieldPath: "metadata.name"
      toFieldPath: "spec.forProvider.vars[0].value"    
    - type: FromCompositeFieldPath
      fromFieldPath: "spec.location"
      toFieldPath: "spec.forProvider.vars[1].value"
    - type: FromCompositeFieldPath
      fromFieldPath: "spec.resourceGroup"
      toFieldPath: "spec.forProvider.vars[2].value"

    - type: FromCompositeFieldPath
      fromFieldPath: "status.subnets.controlPlaneSubnetId"
      toFieldPath: "spec.forProvider.vars[3].value"
      policy:
        fromFieldPath: Required
    - type: FromCompositeFieldPath
      fromFieldPath: "status.subnets.workerNodeSubnetId"
      toFieldPath: "spec.forProvider.vars[4].value"
      policy:
        fromFieldPath: Required      
    - type: FromCompositeFieldPath
      fromFieldPath: "spec.apiServerVisibility"      
      toFieldPath: "spec.forProvider.vars[5].value"
    - type: FromCompositeFieldPath
      fromFieldPath: "spec.ingressVisibility"
      toFieldPath: "spec.forProvider.vars[6].value"
    readinessChecks:	
      - matchCondition:	
          status: 'True'	
          type: Ready	
        type: MatchCondition      
                                        